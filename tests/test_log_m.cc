#include "../sylar/log.h"

// 这里测试了 log 的功能
// 并不需要创建对象就可以使用其中的功能，
// 这里的主要问题集中到 root 用户的由来
int main(void) {
    SYLAR_LOG_DEBUG(SYLAR_LOG_ROOT()) << "Hello World";
    return 0;
}

// 回来讲述这个过程
// 单例模式的功能就是让整个项目中通用的对象只创建一个对象，由此进行一定的节省内存作用
// 这里的 SYLAR_LOG_ROOT() 就是使用了一个单例区创建，这个单例被 static 修饰
// 是一个恒定的静态对象，在整个过程中是同一个对象
// 开始没有想明白这个问题就是没有找到单例被调用的位置，其实每个单例的调用过程都是要通过 GetInstance 这个函数进行调用的

// 有机会写一个单例的测试！！！
// int main() {

// }